What is MSA?

마이크로 소프트 아키텍쳐

마이크로서비스를 잘 활용하기 위해 스프링부트 사용
정의: MSA는 복잡한 애플리케이션을 독립적으로 배포 가능한 작은 서비스로 나누는 데 초점을 맞춘 소프트웨어 아키텍처 스타일.

서비스의 확장성과 유연성을 확보하기 위해 애플리케이션을 독립적인 소규모 서비스로 분리하는 소프트웨어 개발 접근 방식

2014년 제임스 루이스/마틴 파울러가 블로그에 기재, 관심을 받기 시작
- 마이크로서비스의 정의 및 특징을 정의 -> MSA이론의 표준처럼 인식

MSA 특징
- 각 서비스는 자체 프로세스에서 실행되고 경량 메커니즘으로 통신
    - REST는 대표적인 경량 메커니즘
- 비즈니스 기능을 중심으로 분리
- 비즈니스 역량중심의 조직구성 (중요)
- 자동화된 배포 머신을 통해 독립적으로 배포
- 각각의 서비스는 서로 다른 프로그래밍 언어로 작성되고 서로 다른 데이터 저장 기술을 사용할 수 있음
- 중앙 집중식 관리가 거의 이루어지지 않음 (탈중앙화)

모놀리식 서비스 & 마이크로 서비스

- 단일 서버에 여러 서비스가 들어가 있음 (모놀리식)
- 모놀리식: 각각의 서비스를 확장시킬 수는 없음
    - 확장 시 다른 서비스들도 함께 복제
    - 전체 어플리케이션의 확장이 필요함 (한계)
    - 필요한 서비스만 확장시킬 수 없음
- 마이크로: 실질적인 분산이 가능
    - 필요한 서비스만 확장 가능 (유연성) 
    - 확장성과 유연성이 필요한 서비스는 MSA구조 사용해야함
    - 서비스와 데이터의 분리 (단일 책임 원칙)

서비스의 성격에 따라 적절한 기술적용 가능 - 데이터 관점
- 고객/상품 서비스 : 메타정보(원장)관리, 구조화된 정보, 대용량 처리
    - NoSQL : Document Database-MongoDB, Amazon DynamoDB
- 결제/주문 서비스 : 데이터의 정합성(신뢰성), 트랜잭션 보장, 백업 및 복구
    - RDB: MySQL, PostgreSQL, Oracle, MsSQL
- 전시/광고/검색 서비스: 빠른 조회성능
    - Elastic Search, In-Memory Databases: Redis

—> 다양한 기술을 쓰게 됨

비즈니스 역량 기반의 조직구성
- 모놀리식: UI 파트, 서버파트, DB파트
- 마이크로: 검색파트, 주문파트, 결제파트
- 조직의 구성을 보고 서비스 구조 알 수 있음
- 콘웨이 법칙: 기술의 구조는 조직의 구조를 따른다.
    - 조직의 구조가 개발하는 시스템의 설계와 아키텍처에 필연적으로 영향을 미친다는 것을 의미
    - MSA가 요구하는 조직: 교차 기능 팀, 자율성과 책임, 커뮤니케이션 및 협업

Main Keywords
- 서비스기반의 모듈화
- 비즈니스 역량 기반의 조직구성
- 단일책임원칙
- 프로젝트가 아닌 프로덕트
    - 절차가 아닌 결과에 더 초점을 둠
- 탈중앙화 거버넌스
- 탈중앙화 데이터 관리
- 인프라 자동화

E-Commerce Application
- 비즈니스 단위로 잘 분리된 서비스
- 서비스 규모에 따라 개별 확장가능한 구조
- 고객/주문/상품/결제/배송 각각 서버로 분리 (Docker, EC2와 같은 방식을 쓰면 하나의 서버여도 독립적으로 배포 가능하긴 함)

기능(서비스)는 분리되었으나 데이터(DB)가 분리되지 않았다면?
- 결제처리 중 DB부하로 인해 DB서버에 갑자기 장애가 생긴다면?
    - 고객/주문/상품 등 다른 서비스도 영향 받음
- 대량(수백, 수천만건)의 상품정보 갱신을 위한 배치작업이 실행된다면?
    - DB에 많은 부하를 줌
    - 다른 서비스에도 영향 줌
- MSA가 아님 (분산 모놀리식 어플리케이션임) --> 현재 운영중인 시스템이 요 방식임
- DB도 분리되어야 함

진정한 마이크로서비스 아키텍처는
비즈니스 기반으로 잘 분리되어 독립적으로 실행 가능하고 확장가능한 서비스들의 상호작용 

기능의 분리 + 데이터의 분리가 반드시 수반되어야 한다.

현재 백엔드 개발 트렌드를 주도하고 있는 대부분의 기술들은 모두 MSA를 위해 생겨난 기술들이다.


Why, When, How MSA?

모놀리식 어플리케이션에서는 결제 서비스가 장애 나면 모든 서비스 장애남
마이크로서비스는 다른 서비스가 영향 받지 않음

Why MSA?
- 장애를 극복하기 위한 생존의 문제

How MSA?
- 서비스 성격과 개발/운영 조직과 환경이 MSA에 적합한지에 대한 검증과 철저한 준비가 필요
- 넷플릭스의 경우, 완전한 MSA로 전환은 약 7년 정도가 걸림
- 빅뱅 방식이 아닌 스트랭글러 방식으로 적용 필수
- 스트랭글러 패턴
    - 모놀/마이크로 공존 -> 완전한 전환
    - 기존 시스템을 한 번에 대체하는 대신, 시스템의 일부를 점진적으로 대체하면서 새로운 시스템으로 전환하는 방식.
    - 고려사항
        - 프록시 서버를 통해 기존의 endpoint로 요청 되던 backend 요청을 가로채 새로운 서비스 (MS)로 보내주는 작업이 필요
        - 프록시 서버로 인해 단일 장애 지점이나 성능 병목 현상이 발생할 수 있음 

꼭 필요하다고 판단될 때, 제대로 된 조직 구성으로, 점진적으로 도입하라.
